// node package manager -  It allows developers to easily install, manage, and share Node.js modules and packages with others.

// It used a central repository of Node.js packages  This repository contains thousands of packages that can be easily installed using the npm install command, along with their dependencies.

//npm install <package-name> npm retrieves the package from the central repository and installs it in the node_modules directory in your project . automatically installs any dependencies required by the package, and  updates the package.json file with the newly installed package. 




// npm - global command 

// we can install package as
    //local dependancy  - use it only in this particular project
    // npm i <package-name>

    // global dependancy - use it in any project 
    // npm install -g <package-name>

// package.json - metadata about the project, including the project name, version located in the root directory of a Node.js project can be created manually or using the npm init command. uses of package.json is to define the project's dependencies
// npm init - do generate package.json step by step 
// npm init -y 

// npm create node_modules folder to store dependancies(package)

// package-lock.json is a file generated by npm (Node Package Manager) that describes the exact tree of dependencies and their versions that were installed for a given project.

// some packages like bootstrap will use more dependancies and will be automatically installed  
const lodash=require('lodash')
const items=[1,[2,[3,[4]]]]
const newItems=lodash.flattenDeep(items)
console.log(newItems)   

// package.json is necessary while sharing our code 
// if we have package.json in our code , someone just have to do "npm install" to setup node_modules folder in his device , "node_modules" is very big folder to be shared 
